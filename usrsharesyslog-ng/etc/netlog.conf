<?php

// Versioning etc
$VERSION = "v3.0";
$NAME = "Syslog-ng to MySQL parser";
$AUTHOR = "bartjan@pc-mania.nl";
$PROJECT = "https://github.com/barreljan/netlog";

// MySQL Database Information
$database = array();
$database['DB'] = "syslog";
$database['DB_CONF'] = "netlogconfig";
$database['USER'] = "netlog";
$database['PASS'] = "WonFaznu$(s#3nCi";
$database['HOST'] = "127.0.0.1";

// Fifo socket
$log_fifo = "/var/log/syslog.fifo";

function connect_db()
{
    /*
     * Create and check database link
     */
    global $database;

    $db_link = new mysqli($database['HOST'], $database['USER'], $database['PASS'], $database['DB']);
    if (mysqli_connect_errno()) {
        printf("Connect failed: %s\n", mysqli_connect_error());
        die;
    }
    if (!$db_link->select_db($database['DB'])) {
        printf("Unable to select DB: %s\n", mysqli_connect_error());
        die;
    }
    // All ok?
    return $db_link;
}

$db_link = connect_db();

// Populate the global config settings
$config = array();
$query = "SELECT `setting`, `value`
            FROM `{$database['DB_CONF']}`.`global`";
$globalquery = $db_link->prepare($query);
$globalquery->execute();
$globalresults = $globalquery->get_result();
while ($global = $globalresults->fetch_assoc()) {
    $config['global'][$global['setting']] = $global['value'];
}

// Check I am running from the command line
if (PHP_SAPI != 'cli') {
    die('Run me from the command line');
}


function alpha2num($a)
{
    // Converts an alphabetic string into an integer.
    $r = 0;
    $l = strlen($a);
    for ($i = 0; $i < $l; $i++) {
        $r += pow(26, $i) * (ord($a[$l - $i - 1]) - 0x40);
    }
    return substr($r - 1, 0, 9);
}

// Locking functions
function aquire_lock()
{
    global $argv;
    // Use the origin's filename to make an uniq id
    $key = alpha2num(basename($argv[0], ".php"));
    $maxAcquire = 1;
    $permissions = 0666;
    $autoRelease = 1;

    $semaphore = sem_get($key, $maxAcquire, $permissions, $autoRelease);
    if (sem_acquire($semaphore, true)) {
        return $semaphore;
    } else {
        die("Process already running\n");
    }
}

function unlock($semaphore)
{
    sem_release($semaphore);
}
